buildscript {
    ext.ktor_version = '1.4.0'
    repositories.jcenter()
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.0")
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.0'
    id("maven-publish")
    id("com.jfrog.bintray") version "1.8.4"
    id 'org.jetbrains.dokka' version '1.4.0'
    id("org.sonarqube") version "3.0"
    id 'jacoco'
}

sonarqube {
    properties {
        property "sonar.projectName", "7Facette-Core"
        property "sonar.projectKey", "7Facette-Core"
        property "sonar.organization", "munichbughunter"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectVersion", "v1.0.0"
        property "sonar.kotlin.file.suffixes", "kt"
        property "sonar.project.monorepo.enabled", "true"
        property "sonar.junit.reportPaths", "build/reports/sonar/test/*"
        property "sonar.sources", "src/commonMain, src/jvmMain"
        property "sonar.tests", "src/commonTest/, src/jvmTest/kotlin/"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/*"
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/aakira/maven" }
    maven { url "https://jitpack.io" }
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven {
        url "https://maven.pkg.jetbrains.space/sevenfacette/p/sevenfacette/sevenfacette"
        credentials {
            username = System.getenv("SPACE_ACTOR")
            password = System.getenv("SPACE_TOKEN")
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

kotlin {
    jvm()
    js('js') {
        useCommonJs()
        nodejs {
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation 'org.postgresql:postgresql:42.2.5'
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-auth:$ktor_version"
                implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.0'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                api 'com.charleskorn.kaml:kaml:0.21.0'
                implementation 'com.jayway.jsonpath:json-path:2.4.0'
                implementation 'org.skyscreamer:jsonassert:1.5.0'
                implementation 'org.apache.kafka:kafka-clients:2.0.0'
                implementation 'org.apache.avro:avro:1.9.2'
                implementation "io.ktor:ktor-client-apache:$ktor_version"
                implementation 'org.awaitility:awaitility-kotlin:4.0.3'
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc")
                implementation 'com.googlecode.json-simple:json-simple:1.1.1'
                implementation 'com.fasterxml.jackson.core:jackson-core:2.12.1'
                implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
                implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.1'
                implementation 'com.microsoft.playwright:playwright:0.180.0'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'com.h2database:h2:1.4.197'
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.0'
                implementation (npm( "kafkajs", "^1.12.0"))

                implementation "org.jetbrains.kotlinx:kotlinx-nodejs:0.0.7"
                //implementation (npm( "kafka-node", "^5.0.0"))
                //implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.14.0")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc")
            }
        }
        jsTest {
            dependencies {
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc")
                implementation kotlin('test-js')
                implementation("org.jacoco:org.jacoco.core:0.7.9")
            }
        }
    }
}


def GROUP_ID="de.p7s1.qa.sevenfacette" // Your orginization in reverse domain notation. For example:  def GROUP_ID="com.fudge"
def ARTIFACT_ID="core" // The name you gave your package in bintray. In our example it would be:  def ARTIFACT_ID="kotlin-awesome-printer"

// Only for local TESTING //
def LIBRARY_VERSION_NAME=1.0 // The current version of your library. You will need to update this value whenever you upload a new release. For example: 1.0
version = "v1.7.0"

//version = System.properties['VERSION']
version = version.toString().substring(1,6)
LIBRARY_VERSION_NAME=version.toString().substring(0,3)

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID
        if (it.name.contains('metadata')) {
            artifactId = "$ARTIFACT_ID"
        } else {
            artifactId = "$ARTIFACT_ID-$name"
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.jvmTest {
    apply plugin: "jacoco"
    apply plugin: "java"

    testLogging {
        events("passed", "skipped", "failed")
    }
    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
        classDirectories.setFrom(file("${buildDir}/classes/kotlin/jvm/main"))
        sourceDirectories.setFrom(files("src/commonMain", "src/jvmMain"))
        executionData.setFrom(files("${buildDir}/jacoco/jvmTest.exec"))
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "de.p7s1.qa.sevenfacette"
            artifactId = "core"
            version = version
            from components.java
        }
    }
    repositories {
        maven {
            url "https://maven.pkg.jetbrains.space/sevenfacette/p/sevenfacette/sevenfacette"
            credentials {
                username = System.getenv("SPACE_ACTOR")
                password = System.getenv("SPACE_TOKEN")
            }
        }
    }
}
